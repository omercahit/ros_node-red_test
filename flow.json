[
    {
        "id": "a9afdc70a2e5d4b1",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b9b45e67fa8074e6",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ecda5b5de7efaca4",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "393bfa64574b616f",
        "type": "ui_group",
        "name": "new_ui",
        "tab": "b9b45e67fa8074e6",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5f23dc27570c261f",
        "type": "mongodb4-client",
        "name": "",
        "protocol": "mongodb",
        "hostname": "localhost",
        "port": "27017",
        "dbName": "ros_db",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsInsecure": false,
        "uri": "",
        "advanced": "",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "c278f4432d7f2bd3",
        "type": "ui_group",
        "name": "html",
        "tab": "b9b45e67fa8074e6",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d6b4e620c0bf702f",
        "type": "ros-subscriber",
        "z": "a9afdc70a2e5d4b1",
        "topicname": "/test_topic",
        "typepackage": "std_msgs",
        "typename": "String",
        "x": 360,
        "y": 180,
        "wires": [
            [
                "3a676ec84a3adb9b",
                "ebb982cf29d2e547"
            ]
        ]
    },
    {
        "id": "3a676ec84a3adb9b",
        "type": "debug",
        "z": "a9afdc70a2e5d4b1",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 180,
        "wires": []
    },
    {
        "id": "960c19da65dda5cb",
        "type": "ros-publisher",
        "z": "a9afdc70a2e5d4b1",
        "topicname": "/test_topic",
        "typepackage": "std_msgs",
        "typename": "String",
        "x": 750,
        "y": 280,
        "wires": []
    },
    {
        "id": "e77e88ac9a98f879",
        "type": "inject",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"data\":\"testtt\"}",
        "payloadType": "json",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "7f0bcbf8e2ec6716"
            ]
        ]
    },
    {
        "id": "7f0bcbf8e2ec6716",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "function 1",
        "func": "msg.payload = \"testjkj\"\n\nmsg.payload = {\n    \"data\": msg.payload\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 280,
        "wires": [
            [
                "960c19da65dda5cb"
            ]
        ]
    },
    {
        "id": "40a45b70bc609f68",
        "type": "ui_text",
        "z": "a9afdc70a2e5d4b1",
        "group": "393bfa64574b616f",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 790,
        "y": 80,
        "wires": []
    },
    {
        "id": "ebb982cf29d2e547",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "function 2",
        "func": "msg.payload = msg.payload.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 80,
        "wires": [
            [
                "40a45b70bc609f68"
            ]
        ]
    },
    {
        "id": "ebbec7bb15cc88da",
        "type": "mongodb4",
        "z": "a9afdc70a2e5d4b1",
        "clientNode": "5f23dc27570c261f",
        "collection": "ros_db_col",
        "operation": "insertOne",
        "output": "toArray",
        "name": "",
        "x": 640,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "0c8f97c655f23ef7",
        "type": "inject",
        "z": "a9afdc70a2e5d4b1",
        "name": "insert the payload",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"data\":\"testtt\"}]",
        "payloadType": "json",
        "x": 270,
        "y": 680,
        "wires": [
            [
                "ebbec7bb15cc88da"
            ]
        ]
    },
    {
        "id": "d6db4f77234a708c",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "update by data",
        "func": "msg.payload = [{ \"data\": \"test4\" }, { $set: { \"data2.subdata\": \"not ok\" }, $currentDate: { lastModified: true } }]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 780,
        "wires": [
            [
                "ed31ea46ef8ec1df"
            ]
        ]
    },
    {
        "id": "ed31ea46ef8ec1df",
        "type": "mongodb4",
        "z": "a9afdc70a2e5d4b1",
        "clientNode": "5f23dc27570c261f",
        "collection": "ros_db_col",
        "operation": "updateOne",
        "output": "toArray",
        "name": "",
        "x": 650,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "c1ccec689c9cc458",
        "type": "inject",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 230,
        "y": 780,
        "wires": [
            [
                "d6db4f77234a708c"
            ]
        ]
    },
    {
        "id": "d857b11e7c87c574",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "delete by spec",
        "func": "msg.payload = [{ \"data\": \"testjkj\" }]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 900,
        "wires": [
            [
                "793feff4adfc2cf6"
            ]
        ]
    },
    {
        "id": "ca4ecd6f08b1cc09",
        "type": "inject",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 230,
        "y": 900,
        "wires": [
            [
                "d857b11e7c87c574"
            ]
        ]
    },
    {
        "id": "793feff4adfc2cf6",
        "type": "mongodb4",
        "z": "a9afdc70a2e5d4b1",
        "clientNode": "5f23dc27570c261f",
        "collection": "ros_db_col",
        "operation": "deleteOne",
        "output": "toArray",
        "name": "",
        "x": 650,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "4f8e1e04fe9eae3d",
        "type": "comment",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "info": "if the input of deleteMany is {} , it will delete all documents of collection",
        "x": 440,
        "y": 940,
        "wires": []
    },
    {
        "id": "20525c2f65663497",
        "type": "mongodb4",
        "z": "a9afdc70a2e5d4b1",
        "clientNode": "5f23dc27570c261f",
        "collection": "ros_db_col",
        "operation": "find",
        "output": "toArray",
        "name": "",
        "x": 630,
        "y": 1020,
        "wires": [
            [
                "3eaf5fe75af7bb66"
            ]
        ]
    },
    {
        "id": "6034fda6a3095f4d",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "find all and list",
        "func": "msg.payload = [{}]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1020,
        "wires": [
            [
                "20525c2f65663497"
            ]
        ]
    },
    {
        "id": "a3f22c9ee28c33a6",
        "type": "inject",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 230,
        "y": 1020,
        "wires": [
            [
                "6034fda6a3095f4d",
                "ee9d865c5e4f3949"
            ]
        ]
    },
    {
        "id": "26201b7f8d7eba21",
        "type": "ui_text",
        "z": "a9afdc70a2e5d4b1",
        "group": "393bfa64574b616f",
        "order": 1,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "List by Data",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1090,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3eaf5fe75af7bb66",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "function 3",
        "func": "var size;\nvar ids = [];\nsize = Object.keys(msg.payload).length;\nfor (let index = 0; index < size; index++) {\n    ids[index] = msg.payload[index].data\n    \n}\nids = ids.join('\\r\\n')\nmsg.payload = ids;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1020,
        "wires": [
            [
                "26201b7f8d7eba21"
            ]
        ]
    },
    {
        "id": "6962395587e35fe9",
        "type": "debug",
        "z": "a9afdc70a2e5d4b1",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 420,
        "wires": []
    },
    {
        "id": "815bce8a8b9f0b7b",
        "type": "ui_form",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "label": "",
        "group": "393bfa64574b616f",
        "order": 4,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Data:",
                "value": "data",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "data": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "3947011db6b8cc5d"
            ]
        ]
    },
    {
        "id": "3947011db6b8cc5d",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "function 4",
        "func": "msg.payload = [msg.payload];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 500,
        "wires": [
            [
                "6962395587e35fe9",
                "e68b2af54b8b68c4"
            ]
        ]
    },
    {
        "id": "e68b2af54b8b68c4",
        "type": "mongodb4",
        "z": "a9afdc70a2e5d4b1",
        "clientNode": "5f23dc27570c261f",
        "collection": "ros_db_col",
        "operation": "insertOne",
        "output": "toArray",
        "name": "",
        "x": 640,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "9f84fc4feea064ee",
        "type": "ui_button",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "group": "393bfa64574b616f",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Güncelle",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 400,
        "y": 1120,
        "wires": [
            [
                "6034fda6a3095f4d"
            ]
        ]
    },
    {
        "id": "65cd18d00b1b5332",
        "type": "mongodb4",
        "z": "a9afdc70a2e5d4b1",
        "clientNode": "5f23dc27570c261f",
        "collection": "ros_db_col",
        "operation": "findOne",
        "output": "toArray",
        "name": "",
        "x": 620,
        "y": 1200,
        "wires": [
            [
                "f94cb918182a30b8",
                "b351e0139b27bc66"
            ]
        ]
    },
    {
        "id": "ee9d865c5e4f3949",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "find all and list",
        "func": "msg.payload = [{\"data\":\"robot4\"}]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1200,
        "wires": [
            [
                "65cd18d00b1b5332"
            ]
        ]
    },
    {
        "id": "f94cb918182a30b8",
        "type": "debug",
        "z": "a9afdc70a2e5d4b1",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7bcd323778dbc65b",
        "type": "ui_text",
        "z": "a9afdc70a2e5d4b1",
        "group": "393bfa64574b616f",
        "order": 1,
        "width": "6",
        "height": "5",
        "name": "",
        "label": "Latest Position",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1100,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b351e0139b27bc66",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "function 5",
        "func": "msg.payload = \"x:\" + msg.payload.x + \"\\ny:\" + msg.payload.y + \"\\nz:\" + msg.payload.z\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1200,
        "wires": [
            [
                "7bcd323778dbc65b"
            ]
        ]
    },
    {
        "id": "8b88589cab704091",
        "type": "ui_template",
        "z": "a9afdc70a2e5d4b1",
        "group": "c278f4432d7f2bd3",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div {{msg.payload}}>\n\n<canvas id=\"drawCanvas\" width=\"600\" height=\"600\"></canvas>\n<script>\n    // Canvas elementini seçin\n    var canvas = document.getElementById('drawCanvas');\n    var context = canvas.getContext('2d');\n    \n    var backgroundImage = new Image();\n    backgroundImage.src = \"https://i.hizliresim.com/dhimtef.jpg\"\n \n    backgroundImage.onload = function(){\n        context.drawImage(backgroundImage, 0, 0);\n    }\n\n    var startX, startY, endX, endY;\n    \n    // Fare tıklama ve sürükleme olaylarını dinleyin\n    canvas.addEventListener('mousedown', function(e) {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.drawImage(backgroundImage, 0, 0);\n        startX = e.clientX - canvas.getBoundingClientRect().left;\n        startY = e.clientY - canvas.getBoundingClientRect().top;\n    });\n    \n    canvas.addEventListener('mouseup', function(e) {\n        var endX = e.clientX - canvas.getBoundingClientRect().left;\n        var endY = e.clientY - canvas.getBoundingClientRect().top;\n        \n        // Çizgiyi çiz\n        context.beginPath();\n        context.strokeStyle = 'red';\n        context.lineWidth = 2;\n        context.moveTo(startX, startY);\n        context.lineTo(endX, endY);\n\n        var angle = Math.atan2(endY - startY, endX - startX);\n        context.lineTo(endX - 10 * Math.cos(angle - Math.PI / 6), endY - 10 * Math.sin(angle - Math.PI / 6));\n        context.moveTo(endX, endY);\n        context.lineTo(endX - 10 * Math.cos(angle + Math.PI / 6), endY - 10 * Math.sin(angle + Math.PI / 6));\n        context.stroke();\n\n        context.beginPath();\n        context.lineWidth = 5;\n        context.arc(startX, startY, 5, 0, 2 * Math.PI, false);\n        context.strokeStyle = 'green';\n        context.fillStyle = 'green';\n        context.fill();\n        \n        context.stroke();\n\n\n        var angle_of_path = calculateAngle(startX, startY, endX, endY)\n        angle_of_path = angle_of_path.toFixed(2)\n\n        send_to_nodered(startY, startX, angle_of_path)\n        \n    });\n\n    function send_to_nodered(x, y, degree){\n        var message = {\n        x, y, degree\n        };\n        fetch('/test', {\n            method: 'POST',\n            body: JSON.stringify(message),\n            headers: {\n            'Content-Type': 'application/json'\n            }\n        })\n        .then(response => {\n        // Başarılı bir yanıt alındığında burada bir işlem yapabilirsiniz\n        })\n        .catch(error => {\n        console.error('Hata:', error);\n        });\n    }\n\n    function calculateAngle(x1, y1, x2, y2) {\n        // İki nokta arasındaki farkları hesaplayın\n        var deltaX = x2 - x1;\n        var deltaY = y2 - y1;\n        \n        // Açıyı radyan cinsinden hesaplayın\n        var radians = Math.atan2(deltaY, deltaX);\n        \n        // Radyanı dereceye çevirin\n        var degrees = radians * (180 / Math.PI);\n        \n        // Açıyı 0 ile 360 arasına getirin\n        if (degrees < 0) { degrees +=360; } \n        return degrees; \n    }\n\n</script>\n\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 240,
        "y": 1400,
        "wires": [
            [
                "5995f3f6069f7131"
            ]
        ]
    },
    {
        "id": "79bf060d37c9a9fd",
        "type": "http in",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "url": "/test",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1340,
        "wires": [
            [
                "8b88589cab704091"
            ]
        ]
    },
    {
        "id": "322e83fc954cf4e8",
        "type": "ui_text",
        "z": "a9afdc70a2e5d4b1",
        "group": "c278f4432d7f2bd3",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Target",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 950,
        "y": 1440,
        "wires": []
    },
    {
        "id": "5995f3f6069f7131",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "x-y normalization and rotation",
        "func": "var x = -1*(((msg.payload.x/600)*26)-13);\nx = x.toFixed(2);\nx = parseFloat(x)\nmsg.payload.x = x;\nvar y = -1 * (((msg.payload.y / 600) * 26) - 13);\ny = y.toFixed(2);\ny = parseFloat(y)\nmsg.payload.y = y;\n\nvar tempx = msg.payload.x\nvar tempy = msg.payload.y\nmsg.payload.x = -1 * tempy\nmsg.payload.y = tempx\n\nvar position_temp = { x: msg.payload.x, y: msg.payload.y, degree: msg.payload.degree }\nvar obj = { position: position_temp}\n\n\nfunction degreesToRadians(degrees) {\n    return (360 - degrees) * (Math.PI / 180);\n}\n\nfunction eulerToQuaternion(rollDegrees, pitchDegrees, yawDegrees) {\n    const roll = degreesToRadians(rollDegrees);\n    const pitch = degreesToRadians(pitchDegrees);\n    const yaw = degreesToRadians(yawDegrees);\n\n    const cy = Math.cos(yaw * 0.5);\n    const sy = Math.sin(yaw * 0.5);\n    const cp = Math.cos(pitch * 0.5);\n    const sp = Math.sin(pitch * 0.5);\n    const cr = Math.cos(roll * 0.5);\n    const sr = Math.sin(roll * 0.5);\n\n    const qw = cr * cp * cy + sr * sp * sy;\n    const qx = sr * cp * cy - cr * sp * sy;\n    const qy = cr * sp * cy + sr * cp * sy;\n    const qz = cr * cp * sy - sr * sp * cy;\n\n    var orientation = { x: qx, y: qy, z: qz, w: qw }\n\n    return { orientation };\n}\n\nvar orient = eulerToQuaternion(0, 0, msg.payload.degree)\n\nmsg.payload = Object.assign(obj, orient)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1340,
        "wires": [
            [
                "d6a5f6984fe081e0",
                "a45d10ad9555a9f7",
                "9710a54b6f3c27a4",
                "c0fc8720c445b3a7"
            ]
        ]
    },
    {
        "id": "d6a5f6984fe081e0",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "target to string",
        "func": "msg.payload = \"x:\" + msg.payload.position.x + \"\\ny:\" + msg.payload.position.y + \"\\nangle:\" + msg.payload.position.degree\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1440,
        "wires": [
            [
                "322e83fc954cf4e8"
            ]
        ]
    },
    {
        "id": "9710a54b6f3c27a4",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "orient object to string",
        "func": "msg.payload = \"x:\" + msg.payload.orientation.x + \"\\ny:\" + msg.payload.orientation.y + \"\\nz:\" + msg.payload.orientation.z + \"\\nw:\" + msg.payload.orientation.w\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1340,
        "wires": [
            [
                "b6ac93708ed9b90c"
            ]
        ]
    },
    {
        "id": "b6ac93708ed9b90c",
        "type": "ui_text",
        "z": "a9afdc70a2e5d4b1",
        "group": "c278f4432d7f2bd3",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Orientation",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1090,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c0fc8720c445b3a7",
        "type": "function",
        "z": "a9afdc70a2e5d4b1",
        "name": "update by data",
        "func": "msg.payload = [{ \"data\": \"robot3\" }, \n    {\n        $set: { \"position.x\": msg.payload.position.x, \"position.y\": msg.payload.position.y, \"position.z\": 0.0, \"orientation.x\": msg.payload.orientation.x, \"orientation.y\": msg.payload.orientation.y, \"orientation.z\": msg.payload.orientation.z, \"orientation.w\": msg.payload.orientation.w}, \n    $currentDate: { lastModified: true } }]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1540,
        "wires": [
            [
                "831b75538f1e145f"
            ]
        ]
    },
    {
        "id": "831b75538f1e145f",
        "type": "mongodb4",
        "z": "a9afdc70a2e5d4b1",
        "clientNode": "5f23dc27570c261f",
        "collection": "ros_db_col",
        "operation": "updateOne",
        "output": "toArray",
        "name": "",
        "x": 1030,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "11972522b3ee1b52",
        "type": "join",
        "z": "a9afdc70a2e5d4b1",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 110,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "a45d10ad9555a9f7",
        "type": "debug",
        "z": "a9afdc70a2e5d4b1",
        "name": "debug of norm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1260,
        "wires": []
    }
]